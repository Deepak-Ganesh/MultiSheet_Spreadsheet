<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Formula</name>
    </assembly>
    <members>
        <member name="T:SpreadsheetUtilities.Formula">
            <summary>
            Represents formulas written in standard infix notation using standard precedence
            rules.  The allowed symbols are non-negative numbers written using double-precision 
            floating-point syntax; variables that consist of a letter or underscore followed by 
            zero or more letters, underscores, or digits; parentheses; and the four operator 
            symbols +, -, *, and /.  
            
            Spaces are significant only insofar that they delimit tokens.  For example, "xy" is
            a single variable, "x y" consists of two variables "x" and y; "x23" is a single variable; 
            and "x 23" consists of a variable "x" and a number "23".
            
            Associated with every formula are two delegates:  a normalizer and a validator.  The
            normalizer is used to convert variables into a canonical form, and the validator is used
            to add extra restrictions on the validity of a variable (beyond the standard requirement 
            that it consist of a letter or underscore followed by zero or more letters, underscores,
            or digits.)  Their use is described in detail in the constructor and method comments.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.#ctor(System.String)">
            <summary>
            Creates a Formula from a string that consists of an infix expression written as
            described in the class comment.  If the expression is syntactically invalid,
            throws a FormulaFormatException with an explanatory Message.
            
            The associated normalizer is the identity function, and the associated validator
            maps every string to true.  
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.#ctor(System.String,System.Func{System.String,System.String},System.Func{System.String,System.Boolean})">
            <summary>
            Creates a Formula from a string that consists of an infix expression written as
            described in the class comment.  If the expression is syntactically incorrect,
            throws a FormulaFormatException with an explanatory Message.
            
            The associated normalizer and validator are the second and third parameters,
            respectively.  
            
            If the formula contains a variable v such that normalize(v) is not a legal variable, 
            throws a FormulaFormatException with an explanatory message. 
            
            If the formula contains a variable v such that isValid(normalize(v)) is false,
            throws a FormulaFormatException with an explanatory message.
            
            Suppose that N is a method that converts all the letters in a string to upper case, and
            that V is a method that returns true only if a string consists of one letter followed
            by one digit.  Then:
            
            new Formula("x2+y3", N, V) should succeed
            new Formula("x+y3", N, V) should throw an exception, since V(N("x")) is false
            new Formula("2x+y3", N, V) should throw an exception, since "2x+y3" is syntactically incorrect.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.Evaluate(System.Func{System.String,System.Double})">
             <summary>
             Evaluates this Formula, using the lookup delegate to determine the values of
             variables.  When a variable symbol v needs to be determined, it should be looked up
             via lookup(normalize(v)). (Here, normalize is the normalizer that was passed to 
             the constructor.)
             
             For example, if L("x") is 2, L("X") is 4, and N is a method that converts all the letters 
             in a string to upper case:
             
             new Formula("x+7", N, s => true).Evaluate(L) is 11
             new Formula("x+7").Evaluate(L) is 9
             
             Given a variable symbol as its parameter, lookup returns the variable's value 
             (if it has one) or throws an ArgumentException (otherwise).
             
             If no undefined variables or divisions by zero are encountered when evaluating 
             this Formula, the value is returned.  Otherwise, a FormulaError is returned.  
             The Reason property of the FormulaError should have a meaningful explanation.
            
             This method should never throw an exception.
             </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.GetVariables">
            <summary>
            Enumerates the normalized versions of all of the variables that occur in this 
            formula.  No normalization may appear more than once in the enumeration, even 
            if it appears more than once in this Formula.
            
            For example, if N is a method that converts all the letters in a string to upper case:
            
            new Formula("x+y*z", N, s => true).GetVariables() should enumerate "X", "Y", and "Z"
            new Formula("x+X*z", N, s => true).GetVariables() should enumerate "X" and "Z".
            new Formula("x+X*z").GetVariables() should enumerate "x", "X", and "z".
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.ToString">
            <summary>
            Returns a string containing no spaces which, if passed to the Formula
            constructor, will produce a Formula f such that this.Equals(f).  All of the
            variables in the string should be normalized.
            
            For example, if N is a method that converts all the letters in a string to upper case:
            
            new Formula("x + y", N, s => true).ToString() should return "X+Y"
            new Formula("x + Y").ToString() should return "x+Y"
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.Equals(System.Object)">
            <summary>
            If obj is null or obj is not a Formula, returns false.  Otherwise, reports
            whether or not this Formula and obj are equal.
            
            Two Formulae are considered equal if they consist of the same tokens in the
            same order.  To determine token equality, all tokens are compared as strings 
            except for numeric tokens and variable tokens.
            Numeric tokens are considered equal if they are equal after being "normalized" 
            by C#'s standard conversion from string to double, then back to string. This 
            eliminates any inconsistencies due to limited floating point precision.
            Variable tokens are considered equal if their normalized forms are equal, as 
            defined by the provided normalizer.
            
            For example, if N is a method that converts all the letters in a string to upper case:
             
            new Formula("x1+y2", N, s => true).Equals(new Formula("X1  +  Y2")) is true
            new Formula("x1+y2").Equals(new Formula("X1+Y2")) is false
            new Formula("x1+y2").Equals(new Formula("y2+x1")) is false
            new Formula("2.0 + x7").Equals(new Formula("2.000 + x7")) is true
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.op_Equality(SpreadsheetUtilities.Formula,SpreadsheetUtilities.Formula)">
            <summary>
            Reports whether f1 == f2, using the notion of equality from the Equals method.
            Note that if both f1 and f2 are null, this method should return true.  If one is
            null and one is not, this method should return false.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.op_Inequality(SpreadsheetUtilities.Formula,SpreadsheetUtilities.Formula)">
            <summary>
            Reports whether f1 != f2, using the notion of equality from the Equals method.
            Note that if both f1 and f2 are null, this method should return false.  If one is
            null and one is not, this method should return true.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.GetHashCode">
            <summary>
            Returns a hash code for this Formula.  If f1.Equals(f2), then it must be the
            case that f1.GetHashCode() == f2.GetHashCode().  Ideally, the probability that two 
            randomly-generated unequal Formulae have the same hash code should be extremely small.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.GetTokens(System.String)">
            <summary>
            Given an expression, enumerates the tokens that compose it.  Tokens are left paren;
            right paren; one of the four operator symbols; a string consisting of a letter or underscore
            followed by zero or more letters, digits, or underscores; a double literal; and anything that doesn't
            match one of those patterns.  There are no empty tokens, and no token contains white space.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.VerifyAndStoreTokens(System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,System.String},System.Func{System.String,System.Boolean})">
            <summary>
            Makes sure each token is valid and adds to tokens.
            Throws FormulaFormatException on any error.
            </summary>
            <param name="tokenEnumerable">The list of tokens.</param>
            <param name="isValid">The validator method.</param>
            <param name="normalize">The normalizer method.</param>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.VerifyTokenSyntax">
            <summary>
            Parses the tokens, throwing FormulaFormatException on any syntax error.
            </summary>
            <param name="tokens">The list of tokens parsed from the formula.</param>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.IsBinaryOperator(System.String)">
            <summary>
            Checks whether a token is a binary operator.
            Encompasses +, -, *, and /.
            </summary>
            <param name="token">The token string being checked.</param>
            <returns>Whether or not token is a binary operator.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.IsOperator(System.String)">
            <summary>
            Checks whether a token is any operator.
            This encompasses +, -, *, /, (, and ).
            This method is just a string overload for IsOperator(char).
            </summary>
            <param name="token">The token string being checked.</param>
            <returns>Whether or not token is a number.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.IsNumber(System.String)">
            <summary>
            Checks whether token is a valid number.
            A valid number starts with either a digit or a period.
            Note, this doesn't check more than just the first character because the
            GetTokens method will break up invalid numbers appropriately.
            </summary>
            <param name="token">The token string being checked.</param>
            <returns>Whether or not token is a number.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.IsVariable(System.String)">
            <summary>
            Checks whether token is a valid variable.
            A valid variable begins with either a letter or underscore.
            Note, this doesn't check more than just the first character because the
            GetTokens method will break up invalid variables appropriately.
            </summary>
            <param name="token">The token string being checked.</param>
            <returns>Whether or not token is an operator.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.IsOperator(System.Char)">
            <summary>
            Encompasses all valid operators: +, -, *, /, (, and ).
            Satisfies the delegate EvaluatorInstance.OperatorCheck.
            </summary>
            <param name="c">The character being checked.</param>
            <returns>Whether or not c is an operator.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.IsBinaryOperator(System.Char)">
            <summary>
            Encompasses +, -, *, and /.
            Satisfies the delegate OperatorCheck.
            </summary>
            <param name="c">The character being checked.</param>
            <returns>Whether or not c is a multiplicative or additive operator.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.IsAdditive(System.Char)">
            <summary>
            Encompasses + and -.
            Satisfies the delegate EvaluatorInstance.OperatorCheck.
            </summary>
            <param name="c">The character being checked.</param>
            <returns>Whether or not c is an additive operator.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.IsMultiplicative(System.Char)">
            <summary>
            Encompasses * and /.
            Satisfies the delegate EvaluatorInstance.OperatorCheck.
            </summary>
            <param name="c">The character being checked.</param>
            <returns>Whether or not c is a multiplicative operator.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.IsParenthesis(System.Char)">
            <summary>
            Encompasses ( and ).
            Satisfies the delegate EvaluatorInstance.OperatorCheck.
            </summary>
            <param name="c">The character being checked.</param>
            <returns>Whether or not c is a parenthesis.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.NormalizeNumber(System.String)">
            <summary>
            Uses C#'s standard technique for making a number slightly less precise.
            Simply parses numberToken to double then converts back to string.
            </summary>
            <param name="numberToken">Represents a number, throws otherwise.</param>
            <returns>A string representing essentially the same number.</returns>
        </member>
        <member name="F:SpreadsheetUtilities.Formula.tokens">
            <summary>
            Stores numbers as double, variables as string, and operators as char.
            </summary>
        </member>
        <member name="T:SpreadsheetUtilities.Formula.EvaluatorInstance">
            <summary>
            Contains the state of the algorithm (the tokens and two stacks).
            Contains all the code requiring the two stacks.
            Only works with tokens (i.e. a list of strings), NOT the initial expression.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.EvaluatorInstance.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            The only constructor. Creates the empty stacks, and stores the token list.
            </summary>
            <param name="tokens">The list of math tokens</param>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.EvaluatorInstance.Evaluate(System.Func{System.String,System.Double})">
            <summary>
            This is where the evaluation of tokens actually takes place.
            Calls EvaluateToken on each token, then calls EvaluateResult.
            </summary>
            <param name="lookupFunc">The function delegate for looking up a variable by name</param>
            <returns>The numeric result of the evaluation or FormulaError.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.EvaluatorInstance.EvaluateToken(System.String,System.Func{System.String,System.Double})">
            <summary>
            Does all the required steps for a single token.
            </summary>
            <param name="tokenStr">The token string</param>
            <param name="lookupFunc">The function delegate for looking up a variable by name</param>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.EvaluatorInstance.EvaluateResult">
            <summary>
            Does operations on what's left on the stacks after evaluating each token
            to get the expression's result.
            </summary>
            <returns>The numeric result of the evaluation or FormulaError.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.EvaluatorInstance.ProcessNumber(System.Double)">
            <summary>
            Does the necessary operations once a number is parsed, namely peeks the
            operation stack and applies the operation to the top of the value stack
            and value if the operation is multiplicative.
            </summary>
            <param name="value">The just-parsed value, would be on the right side of an operation.</param>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.EvaluatorInstance.PushTopEvaluation">
            <summary>
            Applies the top operation on the top 2 values and pushes to the value stack.
            </summary>
            <returns>Either null or FormulaError.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.EvaluatorInstance.EvaluateTop">
            <summary>
            Applies the top operation on the top 2 values, popping both values and the operation.
            </summary>
            <returns>The double result of the operation or an exception.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.EvaluatorInstance.TestTopOperator(SpreadsheetUtilities.Formula.EvaluatorInstance.OperatorCheck)">
            <summary>
            Checks if the top operator (if there is one) satisfies opCheck.
            Uses Peek, not Pop.
            </summary>
            <param name="opCheck">The function delegate for testing the operator</param>
            <returns>If the operator stack is empty, false, otherwise whatever opCheck returns.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.EvaluatorInstance.ApplyOperation(System.Char,System.Double,System.Double)">
            <summary>
            Applies the operation on the left and right integers.
            Throws if the operation is invalid or if it's division by 0.
            E.g. ('/', 100, 5) -> 100/5 -> 20
            </summary>
            <param name="op">The specific operation (either +, -, *, or /).</param>
            <param name="left">The left-hand operand.</param>
            <param name="right">The right-hand operand.</param>
            <returns>The result of the applied operation.</returns>
        </member>
        <member name="T:SpreadsheetUtilities.Formula.EvaluatorInstance.OperatorCheck">
            <summary>
            Used for checking what kind of operator a specific character is.
            </summary>
            <param name="c">The character being checked.</param>
            <returns>Whether or not c is the specific kind of operator.</returns>
        </member>
        <member name="F:SpreadsheetUtilities.Formula.EvaluatorInstance.tokens">
            <summary>
            Passed in to the constructor. Assumed to contain only valid tokens.
            </summary>
        </member>
        <member name="F:SpreadsheetUtilities.Formula.EvaluatorInstance.operatorStack">
            <summary>
            Constructed empty. Contains the current stack of operators.
            </summary>
        </member>
        <member name="F:SpreadsheetUtilities.Formula.EvaluatorInstance.valueStack">
            <summary>
            Constructed empty. Contains the current stack of values (either written or looked up from variables).
            </summary>
        </member>
        <member name="T:SpreadsheetUtilities.FormulaFormatException">
            <summary>
            Used to report syntactic errors in the argument to the Formula constructor.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.FormulaFormatException.#ctor(System.String)">
            <summary>
            Constructs a FormulaFormatException containing the explanatory message.
            </summary>
        </member>
        <member name="T:SpreadsheetUtilities.FormulaError">
            <summary>
            Used as a possible return value of the Formula.Evaluate method.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.FormulaError.#ctor(System.String)">
            <summary>
            Constructs a FormulaError containing the explanatory reason.
            </summary>
            <param name="reason"></param>
        </member>
        <member name="P:SpreadsheetUtilities.FormulaError.Reason">
            <summary>
             The reason why this FormulaError was created.
            </summary>
        </member>
    </members>
</doc>
