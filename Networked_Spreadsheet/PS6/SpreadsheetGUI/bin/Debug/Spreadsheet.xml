<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spreadsheet</name>
    </assembly>
    <members>
        <member name="T:SS.CircularException">
            <summary>
            Thrown to indicate that a change to a cell will cause a circular dependency.
            </summary>
        </member>
        <member name="T:SS.InvalidNameException">
            <summary>
            Thrown to indicate that a name parameter was either null or invalid.
            </summary>
        </member>
        <member name="T:SS.SpreadsheetReadWriteException">
            <summary>
            Thrown to indicate that a read or write attempt has failed.
            </summary>
        </member>
        <member name="M:SS.SpreadsheetReadWriteException.#ctor(System.String)">
            <summary>
            Creates the exception with a message
            </summary>
        </member>
        <member name="T:SS.AbstractSpreadsheet">
            <summary>
            An AbstractSpreadsheet object represents the state of a simple spreadsheet.  A 
            spreadsheet consists of an infinite number of named cells.
            
            A string is a cell name if and only if it consists of one or more letters,
            followed by one or more digits AND it satisfies the predicate IsValid.
            For example, "A15", "a15", "XY032", and "BC7" are cell names so long as they
            satisfy IsValid.  On the other hand, "Z", "X_", and "hello" are not cell names,
            regardless of IsValid.
            
            Any valid incoming cell name, whether passed as a parameter or embedded in a formula,
            must be normalized with the Normalize method before it is used by or saved in 
            this spreadsheet.  For example, if Normalize is s => s.ToUpper(), then
            the Formula "x3+a5" should be converted to "X3+A5" before use.
            
            A spreadsheet contains a cell corresponding to every possible cell name.  
            In addition to a name, each cell has a contents and a value.  The distinction is
            important.
            
            The contents of a cell can be (1) a string, (2) a double, or (3) a Formula.  If the
            contents is an empty string, we say that the cell is empty.  (By analogy, the contents
            of a cell in Excel is what is displayed on the editing line when the cell is selected.)
            
            In a new spreadsheet, the contents of every cell is the empty string.
             
            The value of a cell can be (1) a string, (2) a double, or (3) a FormulaError.  
            (By analogy, the value of an Excel cell is what is displayed in that cell's position
            in the grid.)
            
            If a cell's contents is a string, its value is that string.
            
            If a cell's contents is a double, its value is that double.
            
            If a cell's contents is a Formula, its value is either a double or a FormulaError,
            as reported by the Evaluate method of the Formula class.  The value of a Formula,
            of course, can depend on the values of variables.  The value of a variable is the 
            value of the spreadsheet cell it names (if that cell's value is a double) or 
            is undefined (otherwise).
            
            Spreadsheets are never allowed to contain a combination of Formulas that establish
            a circular dependency.  A circular dependency exists when a cell depends on itself.
            For example, suppose that A1 contains B1*2, B1 contains C1*2, and C1 contains A1*2.
            A1 depends on B1, which depends on C1, which depends on A1.  That's a circular
            dependency.
            </summary>
        </member>
        <member name="P:SS.AbstractSpreadsheet.Changed">
            <summary>
            True if this spreadsheet has been modified since it was created or saved                  
            (whichever happened most recently); false otherwise.
            </summary>
        </member>
        <member name="P:SS.AbstractSpreadsheet.IsValid">
            <summary>
            Method used to determine whether a string that consists of one or more letters
            followed by one or more digits is a valid variable name.
            </summary>
        </member>
        <member name="P:SS.AbstractSpreadsheet.Normalize">
            <summary>
            Method used to convert a cell name to its standard form.  For example,
            Normalize might convert names to upper case.
            </summary>
        </member>
        <member name="P:SS.AbstractSpreadsheet.Version">
            <summary>
            Version information
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.#ctor(System.Func{System.String,System.Boolean},System.Func{System.String,System.String},System.String)">
            <summary>
            Constructs an abstract spreadsheet by recording its variable validity test,
            its normalization method, and its version information.  The variable validity
            test is used throughout to determine whether a string that consists of one or
            more letters followed by one or more digits is a valid cell name.  The variable
            equality test should be used thoughout to determine whether two variables are
            equal.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetSavedVersion(System.String)">
            <summary>
            Returns the version information of the spreadsheet saved in the named file.
            If there are any problems opening, reading, or closing the file, the method
            should throw a SpreadsheetReadWriteException with an explanatory message.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.Save(System.String)">
            <summary>
            Writes the contents of this spreadsheet to the named file using an XML format.
            The XML elements should be structured as follows:
            
            <spreadsheet version="version information goes here">
            
            <cell>
            <name>
            cell name goes here
            </name>
            <contents>
            cell contents goes here
            </contents>    
            </cell>
            
            </spreadsheet>
            
            There should be one cell element for each non-empty cell in the spreadsheet.  
            If the cell contains a string, it should be written as the contents.  
            If the cell contains a double d, d.ToString() should be written as the contents.  
            If the cell contains a Formula f, f.ToString() with "=" prepended should be written as the contents.
            
            If there are any problems opening, writing, or closing the file, the method should throw a
            SpreadsheetReadWriteException with an explanatory message.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellValue(System.String)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, returns the value (as opposed to the contents) of the named cell.  The return
            value should be either a string, a double, or a SpreadsheetUtilities.FormulaError.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetNamesOfAllNonemptyCells">
            <summary>
            Enumerates the names of all the non-empty cells in the spreadsheet.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellContents(System.String)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, returns the contents (as opposed to the value) of the named cell.  The return
            value should be either a string, a double, or a Formula.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetContentsOfCell(System.String,System.String)">
            <summary>
            If content is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, if content parses as a double, the contents of the named
            cell becomes that double.
            
            Otherwise, if content begins with the character '=', an attempt is made
            to parse the remainder of content into a Formula f using the Formula
            constructor.  There are then three possibilities:
            
              (1) If the remainder of content cannot be parsed into a Formula, a 
                  SpreadsheetUtilities.FormulaFormatException is thrown.
                  
              (2) Otherwise, if changing the contents of the named cell to be f
                  would cause a circular dependency, a CircularException is thrown.
                  
              (3) Otherwise, the contents of the named cell becomes f.
            
            Otherwise, the contents of the named cell becomes content.
            
            If an exception is not thrown, the method returns a set consisting of
            name plus the names of all other cells whose value depends, directly
            or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetCellContents(System.String,System.Double)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, the contents of the named cell becomes number.  The method returns a
            set consisting of name plus the names of all other cells whose value depends, 
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetCellContents(System.String,System.String)">
            <summary>
            If text is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, the contents of the named cell becomes text.  The method returns a
            set consisting of name plus the names of all other cells whose value depends, 
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetCellContents(System.String,SpreadsheetUtilities.Formula)">
            <summary>
            If formula parameter is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, if changing the contents of the named cell to be the formula would cause a 
            circular dependency, throws a CircularException.
            
            Otherwise, the contents of the named cell becomes formula.  The method returns a
            Set consisting of name plus the names of all other cells whose value depends,
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetDirectDependents(System.String)">
            <summary>
            If name is null, throws an ArgumentNullException.
            
            Otherwise, if name isn't a valid cell name, throws an InvalidNameException.
            
            Otherwise, returns an enumeration, without duplicates, of the names of all cells whose
            values depend directly on the value of the named cell.  In other words, returns
            an enumeration, without duplicates, of the names of all cells that contain
            formulas containing name.
            
            For example, suppose that
            A1 contains 3
            B1 contains the formula A1 * A1
            C1 contains the formula B1 + A1
            D1 contains the formula B1 - C1
            The direct dependents of A1 are B1 and C1
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellsToRecalculate(System.Collections.Generic.ISet{System.String})">
            <summary>
            Requires that names be non-null.  Also requires that if names contains s,
            then s must be a valid non-null cell name.
            
            If any of the named cells are involved in a circular dependency,
            throws a CircularException.
            
            Otherwise, returns an enumeration of the names of all cells whose values must
            be recalculated, assuming that the contents of each cell named in names has changed.
            The names are enumerated in the order in which the calculations should be done.  
            
            For example, suppose that 
            A1 contains 5
            B1 contains 7
            C1 contains the formula A1 + B1
            D1 contains the formula A1 * C1
            E1 contains 15
            
            If A1 and B1 have changed, then A1, B1, and C1, and D1 must be recalculated,
            and they must be recalculated in either the order A1,B1,C1,D1 or B1,A1,C1,D1.
            The method will produce one of those enumerations.
            
            Please note that this method depends on the abstract GetDirectDependents.
            It won't work until GetDirectDependents is implemented correctly.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellsToRecalculate(System.String)">
            <summary>
            A convenience method for invoking the other version of GetCellsToRecalculate
            with a singleton set of names.  See the other version for details.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.Visit(System.String,System.String,System.Collections.Generic.ISet{System.String},System.Collections.Generic.LinkedList{System.String})">
            <summary>
            A helper for the GetCellsToRecalculate method.
            </summary>
        </member>
        <member name="T:SS.Spreadsheet">
            <summary>
            A working implementation of AbstractSpreadsheet.
            </summary>
        </member>
        <member name="P:SS.Spreadsheet.Changed">
            <summary>
            True if this spreadsheet has been modified since it was created or saved                  
            (whichever happened most recently); false otherwise.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.#ctor(System.Func{System.String,System.Boolean},System.Func{System.String,System.String},System.String)">
            <summary>
            Constructs an abstract spreadsheet by recording its variable validity test,
            its normalization method, and its version information.  The variable validity
            test is used throughout to determine whether a string that consists of one or
            more letters followed by one or more digits is a valid cell name.  The variable
            equality test should be used thoughout to determine whether two variables are
            equal.
            </summary>
            <param name="isValid">Method for validating a variable.</param>
            <param name="normalize">Method for normalizing a variable.</param>
            <param name="version">The spreadsheet version.</param>
        </member>
        <member name="M:SS.Spreadsheet.#ctor(System.String,System.Func{System.String,System.Boolean},System.Func{System.String,System.String},System.String)">
            <summary>
            Loads an XML file describing a spreadsheet, setting all the cells.
            </summary>
            <param name="filename">The file name with path included.</param>
            <param name="isValid">Method for validating a variable.</param>
            <param name="normalize">Method for normalizing a variable.</param>
            <param name="version">The required spreadsheet version.</param>
        </member>
        <member name="M:SS.Spreadsheet.#ctor">
            <summary>
            The default constructor.
            isValid always returns true, normalize does not change the string,
            version is "default".
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.GetSavedVersion(System.String)">
            <summary>
            Returns the version information of the spreadsheet saved in the named file.
            If there are any problems opening, reading, or closing the file, the method
            should throw a SpreadsheetReadWriteException with an explanatory message.
            </summary>
            <param name="filename">The file name with path included.</param>
            <returns>The version expressed in the file.</returns>
        </member>
        <member name="M:SS.Spreadsheet.Save(System.String)">
            <summary>
            Writes the contents of this spreadsheet to the named file using an XML format.
            The XML elements should be structured as follows:
            
            <spreadsheet version="version information goes here">
            
            <cell>
            <name>
            cell name goes here
            </name>
            <contents>
            cell contents goes here
            </contents>    
            </cell>
            
            </spreadsheet>
            
            There should be one cell element for each non-empty cell in the spreadsheet.  
            If the cell contains a string, it should be written as the contents.  
            If the cell contains a double d, d.ToString() should be written as the contents.  
            If the cell contains a Formula f, f.ToString() with "=" prepended should be written as the contents.
            
            If there are any problems opening, writing, or closing the file, the method should throw a
            SpreadsheetReadWriteException with an explanatory message.
            </summary>
            <param name="filename">The file name with path included.</param>
        </member>
        <member name="M:SS.Spreadsheet.GetCellValue(System.String)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, returns the value (as opposed to the contents) of the named cell.  The return
            value should be either a string, a double, or a SpreadsheetUtilities.FormulaError.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.GetNamesOfAllNonemptyCells">
            <summary>
            Enumerates the names of all the non-empty cells in the spreadsheet.
            Copies each key in the internal Dictionary.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.GetCellContents(System.String)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, returns the contents (as opposed to the value) of the named cell.  The return
            value should be either a string, a double, or a Formula.
            Cells by default (i.e. not previously set) are an empty string.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.SetContentsOfCell(System.String,System.String)">
            <summary>
            If content is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, if content parses as a double, the contents of the named
            cell becomes that double.
            
            Otherwise, if content begins with the character '=', an attempt is made
            to parse the remainder of content into a Formula f using the Formula
            constructor.  There are then three possibilities:
            
              (1) If the remainder of content cannot be parsed into a Formula, a 
                  SpreadsheetUtilities.FormulaFormatException is thrown.
                  
              (2) Otherwise, if changing the contents of the named cell to be f
                  would cause a circular dependency, a CircularException is thrown.
                  
              (3) Otherwise, the contents of the named cell becomes f.
            
            Otherwise, the contents of the named cell becomes content.
            
            If an exception is not thrown, the method returns a set consisting of
            name plus the names of all other cells whose value depends, directly
            or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            </summary>
            <param name="name">The name of the cell whose contents are being set.</param>
            <param name="content">The written contents to set the cell to.</param>
            <returns>All recalculated cells.</returns>
        </member>
        <member name="M:SS.Spreadsheet.SetCellContents(System.String,System.Double)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, the contents of the named cell becomes number.  The method returns a
            set consisting of name plus the names of all other cells whose value depends, 
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            </summary>
            <param name="name">The name of the cell whose contents are being set.</param>
            <param name="number">The number to set the cell to.</param>
            <returns>All recalculated cells.</returns>
        </member>
        <member name="M:SS.Spreadsheet.SetCellContents(System.String,System.String)">
            <summary>
            If text is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, the contents of the named cell becomes text.  The method returns a
            set consisting of name plus the names of all other cells whose value depends, 
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            </summary>
            <param name="name">The name of the cell whose contents are being set.</param>
            <param name="text">The text to set the cell to.</param>
            <returns>All recalculated cells.</returns>
        </member>
        <member name="M:SS.Spreadsheet.SetCellContents(System.String,SpreadsheetUtilities.Formula)">
            <summary>
            If the formula parameter is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, if changing the contents of the named cell to be the formula would cause a 
            circular dependency, throws a CircularException.  (No change is made to the spreadsheet.)
            
            Otherwise, the contents of the named cell becomes formula.  The method returns a
            Set consisting of name plus the names of all other cells whose value depends,
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            </summary>
            <param name="name">The name of the cell whose contents are being set.</param>
            <param name="formula">The Formula to set the cell to.</param>
            <returns>All recalculated cells.</returns>
        </member>
        <member name="M:SS.Spreadsheet.GetDirectDependents(System.String)">
            <summary>
            If name is null, throws an ArgumentNullException.
            
            Otherwise, if name isn't a valid cell name, throws an InvalidNameException.
            
            Otherwise, returns an enumeration, without duplicates, of the names of all cells whose
            values depend directly on the value of the named cell.  In other words, returns
            an enumeration, without duplicates, of the names of all cells that contain
            formulas containing name.
            
            For example, suppose that
            A1 contains 3
            B1 contains the formula A1 * A1
            C1 contains the formula B1 + A1
            D1 contains the formula B1 - C1
            The direct dependents of A1 are B1 and C1
            </summary>
            <param name="name">The name of the cell whose dependents are being returned.</param>
            <returns>The cell's direct dependents..</returns>
        </member>
        <member name="M:SS.Spreadsheet.GetDependencyGraph">
            <summary>
            Getter for DependencyGraph object added by Lisa Richardson 4/18/19
            </summary>
            <returns></returns>
        </member>
        <member name="M:SS.Spreadsheet.VerifyAndNormalizeName(System.String)">
            <summary>
            Verifies cellName is a valid name, normalizes it, and validates it.
            </summary>
            <param name="cellName">The supposed name of the cell.</param>
            <returns>The normalized version of cellName.</returns>
        </member>
        <member name="M:SS.Spreadsheet.VerifyValidCellName(System.String)">
            <summary>
            Throws InvalidNameException if <paramref name="cellName"/> is null or invalid.
            </summary>
            <param name="cellName">The name of the cell passed in.</param>
            <exception cref="T:SS.InvalidNameException">Thrown if <paramref name="cellName"/> is null or invalid.</exception>
        </member>
        <member name="M:SS.Spreadsheet.IsValidCellName(System.String)">
            <summary>
            Returns true if <paramref name="cellName"/> is not null and is valid.
            </summary>
            <param name="cellName">The name of the cell passed in.</param>
            <returns>Whether <paramref name="cellName"/> is not null and is valid.</returns>
        </member>
        <member name="M:SS.Spreadsheet.TryGetCell(System.String,SS.Cell@)">
            <summary>
            Checks if the cell is within the cells dictionary, returning true if it is.
            The name argument is normalized and verified and validated.
            </summary>
            <param name="name">The name of the cell being looked up.</param>
            <param name="cell">The cell in the dictionary, if one exists.</param>
            <returns>Whether or not the cell exists.</returns>
        </member>
        <member name="M:SS.Spreadsheet.VerifyArgumentNotNull(System.Object,System.String)">
            <summary>
            If arg is null, throws ArgumentNullException using argName in the message.
            </summary>
            <param name="arg">The actual argument object.</param>
            <param name="argName">The name of the argument for use in the message.</param>
        </member>
        <member name="M:SS.Spreadsheet.SetOrCreateCell(System.String,System.Object)">
            <summary>
            Either sets the contents of an existent cell or creates one.
            If the cell was a Formula (and/or still is), removes its dependents.
            </summary>
            <param name="cellName">The name of the cell being altered or created.</param>
            <param name="cellContents">The new contents for the cell.</param>
            <returns>The cell within the dictionary.</returns>
        </member>
        <member name="M:SS.Spreadsheet.RecalculateCellsNoRoot(System.String)">
            <summary>
            A form of RecalculateCells(string) where the cell indicated by changedCellName is
            not recalculated.
            Used when the cell's contents are set to a string.
            </summary>
            <param name="changedCellName">The cell that is assumed to have changed.</param>
            <returns>The unordered set of all cells returned by GetCellsToRecalculate.
            This includes changedCellName.</returns>
        </member>
        <member name="M:SS.Spreadsheet.RecalculateCells(System.String)">
            <summary>
            Convenience method. Calls RecalculateCells(IEnumerable) by passing in the result
            of a call to GetCellsToRecalculate using changedCellName.
            The cell indicated by changedCellName is recalculated.
            </summary>
            <param name="changedCellName">The cell that is assumed to have changed.</param>
            <returns>The unordered set of all cells that were recalculated.</returns>
        </member>
        <member name="M:SS.Spreadsheet.RecalculateCells(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loops through an enumerable in order, calling Evaluate on each Formula.
            Stores the result of Evaluate in the cell's value field.
            </summary>
            <param name="cellList">An ordered list of cell names.</param>
        </member>
        <member name="M:SS.Spreadsheet.ReadToVersion(System.Xml.XmlReader)">
            <summary>
            Calls Read twice. Verifies that the second node is spreadsheet and has a version
            attribute and returns it. Leaves the reader on the spreadsheet node.
            </summary>
            <param name="reader">The XML document containing a spreadsheet's data.</param>
            <returns>The version expressed in the XML document.</returns>
        </member>
        <member name="M:SS.Spreadsheet.VerifyNextNodeName(System.Xml.XmlReader,System.String)">
            <summary>
            Calls Read on reader once. Verifies the node it advanced to has the appropriate name.
            </summary>
            <param name="reader">The XML document containing a spreadsheet's data.</param>
            <param name="expectedName">The name the next node must have.</param>
            <exception cref="T:SS.SpreadsheetReadWriteException">Thrown if the next node's name is
            not expectedName.</exception>
        </member>
        <member name="M:SS.Spreadsheet.VerifyNodeName(System.Xml.XmlReader,System.String)">
            <summary>
            Verifies the current node of reader is named expectedName.
            </summary>
            <param name="reader">The XML document containing a spreadsheet's data.</param>
            <param name="expectedName">The name the next node must have.</param>
            <exception cref="T:SS.SpreadsheetReadWriteException">Thrown if the current node's name is
            not expectedName.</exception>
        </member>
        <member name="M:SS.Spreadsheet.VerifyNoCircularDependencies(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Throws an exception if there is a circular dependency within the cell
            being added.
            </summary>
            <param name="cellName">The name of the cell being added.</param>
            <param name="formulaVarList">All the variables in the cell's formula.</param>
        </member>
        <member name="M:SS.Spreadsheet.Lookup(System.String)">
            <summary>
            Satisfies the delegate required by Formula.Evaluate.
            Returns the value of the cell indicated by name, throwing an exception if it does not
            exist or is not a number.
            </summary>
            <param name="name">The name of the cell being looked up.</param>
            <returns>The value of the cell indicated by name.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the name does not exist or is not
            a number.</exception>
        </member>
        <member name="F:SS.Spreadsheet.cells">
            <summary>
            The contents-value pairs for each non-empty cell.
            </summary>
        </member>
        <member name="F:SS.Spreadsheet.dependencyGraph">
            <summary>
            The dependency graph of all non-empty cells.
            </summary>
        </member>
        <member name="T:SS.Cell">
            <summary>
            Contains the non-dependency information about a cell.
            This consists of its contents and its value.
            Both fields are public properties because Cell should never escape.
            </summary>
        </member>
        <member name="P:SS.Cell.Contents">
            <summary>
            A string, double, or Formula.
            </summary>
        </member>
        <member name="P:SS.Cell.Value">
            <summary>
            A string, double, or FormulaError.
            </summary>
        </member>
        <member name="M:SS.Cell.#ctor(System.Object)">
            <summary>
            Creates a cell with the contents set.
            Value never gets set immediately.
            </summary>
            <param name="contents"></param>
        </member>
        <member name="T:SS.PairExtensions">
            <summary>
            Contains an extension method for <see cref="!:KeyValuePair&lt;string, Cell&gt;"/>.
            </summary>
        </member>
        <member name="M:SS.PairExtensions.WriteXml(System.Collections.Generic.KeyValuePair{System.String,SS.Cell},System.Xml.XmlWriter)">
            <summary>
            Writes XML data to writer for a single cell (string name and Cell).
            </summary>
            <param name="pair">The KeyValuePair within a dictionary where the string is the
            cell's name and the Cell is the cell's data.</param>
            <param name="writer">The XmlWriter for the document being saved.</param>
        </member>
    </members>
</doc>
